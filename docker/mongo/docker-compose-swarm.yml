version: '3'

networks:
  mongo-network:
    driver: overlay

services:
  mongo1:
    hostname: mongo1
    image: mongo
    expose:
      - 27017
    ports:
      - 30001:27017 
    restart: always
    command: mongod --replSet my-mongo-set
    deploy:
      placement:
        constraints:
          - node.hostname == manager01
    networks:
      - mongo-network
  mongo2:
    hostname: mongo2
    image: mongo
    expose:
      - 27017
    ports:
      - 30002:27017
    restart: always
    command: mongod --replSet my-mongo-set
    deploy:
      placement:
        constraints:
          - node.hostname == worker01
    networks:
      - mongo-network
  mongo3:
    hostname: mongo3
    image: mongo
    expose:
      - 27017
    ports:
      - 30003:27017
    restart: always
    command: mongod --replSet my-mongo-set
    deploy:
      placement:
        constraints:
          - node.hostname == worker02
    networks:
      - mongo-network

# finally, we can define the initialization server
# this runs the `rs.initiate` command to intialize
# the replica set and connect the three servers to each other
  mongoinit:
    image: mongo
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - mongo-network
    command: >
      mongo --host mongo1:27017 --eval 
      '
      db = (new Mongo("localhost:27017")).getDB("test");
      config = {
      "_id" : "my-mongo-set",
      "members" : [
        {
          "_id" : 0,
          "host" : "mongo1:27017"
        },
        {
          "_id" : 1,
          "host" : "mongo2:27017"
        },
        {
          "_id" : 2,
          "host" : "mongo3:27017"
        }
      ]
      };
      rs.initiate(config);
      '  