version: '3.7'

services:
  mongo01:
    hostname: mongo01
    image: mongo
    ports:
      - target: 27017
        published: 27017
        protocol: tcp
        mode: host
    restart: always
    deploy:
      placement:
        constraints:
          - node.hostname == manager01
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "amongo" ]
  mongo02:
    hostname: mongo02
    image: mongo
    ports:
      - target: 27017
        published: 27017
        protocol: tcp
        mode: host
    restart: always
    deploy:
      placement:
        constraints:
          - node.hostname == worker01
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "amongo" ]
  mongo03:
    hostname: mongo03
    image: mongo
    ports:
      - target: 27017
        published: 27017
        protocol: tcp
        mode: host
    restart: always
    deploy:
      placement:
        constraints:
          - node.hostname == worker02
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "amongo" ]

# finally, we can define the initialization server
# this runs the `rs.initiate` command to intialize
# the replica set and connect the three servers to each other
  # mongoinit:
  #   image: mongo
  #   # this container will exit after executing the command
  #   restart: "no"
  #   depends_on:
  #     - mongo1
  #     - mongo2
  #     - mongo3
  #   networks:
  #     - mongo-network
  #   command: >
  #     mongo --host mongo1:27017 --eval 
  #     '
  #     db = (new Mongo("localhost:27017")).getDB("test");
  #     config = {
  #     "_id" : "my-mongo-set",
  #     "members" : [
  #       {
  #         "_id" : 0,
  #         "host" : "mongo1:27017"
  #       },
  #       {
  #         "_id" : 1,
  #         "host" : "mongo2:27017"
  #       },
  #       {
  #         "_id" : 2,
  #         "host" : "mongo3:27017"
  #       }
  #     ]
  #     };
  #     rs.initiate(config);
  #     '  